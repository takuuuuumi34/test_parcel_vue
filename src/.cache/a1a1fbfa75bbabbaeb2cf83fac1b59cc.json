{"dependencies":[],"generated":{"js":"\"use strict\";\n\nvar version = \"1.0.0\";\nvar CACHE = version + '::PWAsite';\nvar ORIGIN = location.protocol + '//' + location.hostname;\nvar STATIC_FILES = [ORIGIN + \"/\", ORIGIN + \"/index.html\", ORIGIN + \"/2fc397f26a1b76824c8ea93f5e051b0f.js\", ORIGIN + \"/7773ab89af7fcdc9d879da3bea032573.js\", ORIGIN + \"/d412d55f28519c0115f42b4906bc52a9.js\"];\n\nself.addEventListener('install', function (event) {\n  event.waitUntil(caches.open(CACHE).then(function (cache) {\n    // return cache.addAll([\n    //   'index.html',\n    // ]);\n    return Promise.all(STATIC_FILES.map(function (url) {\n      return fetch(new Request(url, { cache: 'no-cache', mode: 'no-cors' })).then(function (response) {\n        return cache.put(url, response);\n      });\n    }));\n  }));\n});\n\nfunction clearOldCaches() {\n  return caches.keys().then(function (keylist) {\n    return Promise.all(keylist.filter(function (key) {\n      return key !== CACHE;\n    }).map(function (key) {\n      return caches.delete(key);\n    }));\n  });\n}\n\nself.addEventListener('activate', function (event) {\n  console.log('service worker: activate');\n  // delete old caches\n  event.waitUntil(clearOldCaches().then(function () {\n    return self.clients.claim();\n  }));\n});\n\nself.addEventListener('fetch', function (event) {\n  console.log('service worker: fetch');\n  console.log(event);\n  event.respondWith(caches.match(event.request).then(function (response) {\n    return response || fetch(event.request);\n    // caches.match() always resolves\n    // but in case of success response will have value\n    // if (response !== undefined) {\n    //   return response;\n    // } else {\n    //   console.log(response);\n    //   return fetch(new Request(event.request), { cache: 'no-cache', mode: 'no-cors' }).then(function (response) {\n    //     // response may be used only once\n    //     // we need to save clone to put one copy in cache\n    //     // and serve second one\n    //     let responseClone = response.clone();\n\n    //     caches.open(CACHE).then(function (cache) {\n    //       cache.put(event.request, responseClone);\n    //     });\n    //     return response;\n    //   }).catch(function () {\n    //     return caches.match('index.html');\n    //   });\n    // }\n  }));\n});"},"hash":"6c147eaa1b9fa25addbdbe4c75bcbdf8"}